-- ============================================================================
-- AI ENHANCED FEATURES MIGRATION
-- Adding AI suggestions support and task enhancements for user stories
-- ============================================================================

-- ============================================================================
-- 1. EXTEND TASKS TABLE FOR RECURRENCE PATTERNS
-- ============================================================================

-- Add recurrence pattern support to tasks
ALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS recurrence_pattern JSONB DEFAULT NULL;
ALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS scheduled_date TIMESTAMP WITH TIME ZONE;
ALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS is_recurring BOOLEAN DEFAULT false;
ALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS habit_id UUID REFERENCES public.habits(id) ON DELETE SET NULL;
ALTER TABLE public.tasks ADD COLUMN IF NOT EXISTS auto_generated BOOLEAN DEFAULT false;

COMMENT ON COLUMN public.tasks.recurrence_pattern IS 'Flexible recurrence pattern: {type: "daily|weekly|monthly|custom", interval: 1, daysOfWeek: [1,2,3], endDate: "2024-12-31", count: 10}';
COMMENT ON COLUMN public.tasks.scheduled_date IS 'When the task is scheduled to be worked on (optional)';
COMMENT ON COLUMN public.tasks.is_recurring IS 'Whether this task repeats according to recurrence_pattern';
COMMENT ON COLUMN public.tasks.habit_id IS 'Link to habit if this task was auto-generated from a habit';
COMMENT ON COLUMN public.tasks.auto_generated IS 'Whether this task was automatically generated from a habit';

-- ============================================================================
-- 2. EXTEND HABIT_TEMPLATES FOR AI SUGGESTIONS
-- ============================================================================

-- Add AI-specific fields to habit_templates
ALTER TABLE public.habit_templates ADD COLUMN IF NOT EXISTS ai_generated BOOLEAN DEFAULT false;
ALTER TABLE public.habit_templates ADD COLUMN IF NOT EXISTS ai_confidence DECIMAL CHECK (ai_confidence IS NULL OR (ai_confidence >= 0 AND ai_confidence <= 1));
ALTER TABLE public.habit_templates ADD COLUMN IF NOT EXISTS ai_reasoning TEXT;
ALTER TABLE public.habit_templates ADD COLUMN IF NOT EXISTS goal_context TEXT;
ALTER TABLE public.habit_templates ADD COLUMN IF NOT EXISTS approved_by_user BOOLEAN DEFAULT NULL;
ALTER TABLE public.habit_templates ADD COLUMN IF NOT EXISTS rejected_reason TEXT;

COMMENT ON COLUMN public.habit_templates.ai_generated IS 'Whether this template was generated by AI';
COMMENT ON COLUMN public.habit_templates.ai_confidence IS 'AI confidence score for this suggestion (0-1)';
COMMENT ON COLUMN public.habit_templates.ai_reasoning IS 'AI explanation for why this habit helps achieve the goal';
COMMENT ON COLUMN public.habit_templates.goal_context IS 'The goal this habit was suggested for';
COMMENT ON COLUMN public.habit_templates.approved_by_user IS 'User approval status: true=approved, false=rejected, null=pending';
COMMENT ON COLUMN public.habit_templates.rejected_reason IS 'Reason for rejection if approved_by_user=false';

-- ============================================================================
-- 3. EXTEND GOALS TABLE WITH END DATE
-- ============================================================================

-- Goals table already has timeline_end, but let's make sure it's properly indexed and has the right constraints
CREATE INDEX IF NOT EXISTS idx_goals_timeline_end ON public.goals(timeline_end) WHERE timeline_end IS NOT NULL;

-- ============================================================================
-- 4. CREATE AI HABIT SUGGESTIONS TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS public.ai_habit_suggestions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  goal_id UUID NOT NULL REFERENCES public.goals(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  workspace_id UUID NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  suggestion_data JSONB NOT NULL,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'converted')),
  rejected_reason TEXT,
  ai_provider TEXT NOT NULL,
  ai_model TEXT,
  ai_confidence DECIMAL CHECK (ai_confidence >= 0 AND ai_confidence <= 1),
  created_habit_id UUID REFERENCES public.habits(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

ALTER TABLE public.ai_habit_suggestions ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public.ai_habit_suggestions IS 'AI-generated habit suggestions for goals with approval workflow';
COMMENT ON COLUMN public.ai_habit_suggestions.suggestion_data IS 'Full AI suggestion including title, description, frequency, etc.';
COMMENT ON COLUMN public.ai_habit_suggestions.status IS 'Workflow status: pending review, approved, rejected, or converted to habit';
COMMENT ON COLUMN public.ai_habit_suggestions.created_habit_id IS 'Reference to habit created from this suggestion';

-- ============================================================================
-- 5. CREATE TASK STATUS ENUM AND UPDATE EXISTING
-- ============================================================================

-- Check if we need to add new status values
DO $$
BEGIN
  -- Add new status values if they don't exist
  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'pending' AND enumtypid = (SELECT oid FROM pg_type WHERE typname = 'task_status')) THEN
    ALTER TYPE task_status ADD VALUE 'pending';
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_enum WHERE enumlabel = 'scheduled' AND enumtypid = (SELECT oid FROM pg_type WHERE typname = 'task_status')) THEN
    ALTER TYPE task_status ADD VALUE 'scheduled';
  END IF;
END $$;

-- ============================================================================
-- 6. CREATE INDEXES FOR PERFORMANCE
-- ============================================================================

CREATE INDEX IF NOT EXISTS idx_tasks_recurrence ON public.tasks(is_recurring) WHERE is_recurring = true;
CREATE INDEX IF NOT EXISTS idx_tasks_habit_id ON public.tasks(habit_id) WHERE habit_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_tasks_auto_generated ON public.tasks(auto_generated) WHERE auto_generated = true;
CREATE INDEX IF NOT EXISTS idx_tasks_scheduled_date ON public.tasks(scheduled_date) WHERE scheduled_date IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_habit_templates_ai_generated ON public.habit_templates(ai_generated) WHERE ai_generated = true;
CREATE INDEX IF NOT EXISTS idx_habit_templates_approval_status ON public.habit_templates(approved_by_user);

CREATE INDEX IF NOT EXISTS idx_ai_habit_suggestions_goal_id ON public.ai_habit_suggestions(goal_id);
CREATE INDEX IF NOT EXISTS idx_ai_habit_suggestions_user_id ON public.ai_habit_suggestions(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_habit_suggestions_status ON public.ai_habit_suggestions(status);

-- ============================================================================
-- 7. CREATE RLS POLICIES FOR NEW TABLE
-- ============================================================================

CREATE POLICY "Users can view their AI habit suggestions"
  ON public.ai_habit_suggestions FOR SELECT
  USING (user_id = auth.uid());

CREATE POLICY "Users can create AI habit suggestions for their goals"
  ON public.ai_habit_suggestions FOR INSERT
  WITH CHECK (
    user_id = auth.uid()
    AND goal_id IN (SELECT id FROM goals WHERE user_id = auth.uid())
  );

CREATE POLICY "Users can update their AI habit suggestions"
  ON public.ai_habit_suggestions FOR UPDATE
  USING (user_id = auth.uid());

CREATE POLICY "Users can delete their AI habit suggestions"
  ON public.ai_habit_suggestions FOR DELETE
  USING (user_id = auth.uid());

-- ============================================================================
-- 8. CREATE FUNCTIONS FOR TASK AUTOMATION
-- ============================================================================

-- Function to generate recurring tasks from habits
CREATE OR REPLACE FUNCTION public.generate_recurring_tasks_from_habit(
  p_habit_id UUID,
  p_start_date DATE DEFAULT CURRENT_DATE,
  p_days_ahead INTEGER DEFAULT 7
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_habit_record habits%ROWTYPE;
  v_task_count INTEGER := 0;
  v_current_date DATE;
  v_end_date DATE;
  v_should_create_task BOOLEAN;
BEGIN
  -- Get habit details
  SELECT * INTO v_habit_record FROM habits WHERE id = p_habit_id;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'Habit not found: %', p_habit_id;
  END IF;

  v_end_date := p_start_date + p_days_ahead;
  v_current_date := p_start_date;

  -- Generate tasks based on frequency
  WHILE v_current_date <= v_end_date LOOP
    v_should_create_task := false;

    -- Determine if we should create a task for this date based on frequency
    CASE v_habit_record.frequency
      WHEN 'daily' THEN
        v_should_create_task := true;
      WHEN 'weekly' THEN
        -- For weekly, create on the same day of week as start_date
        v_should_create_task := EXTRACT(DOW FROM v_current_date) = EXTRACT(DOW FROM v_habit_record.start_date);
      WHEN 'monthly' THEN
        -- For monthly, create on the same day of month as start_date
        v_should_create_task := EXTRACT(DAY FROM v_current_date) = EXTRACT(DAY FROM v_habit_record.start_date);
      WHEN 'custom' THEN
        -- Custom frequency would need more complex logic based on custom_frequency JSON
        -- For now, default to weekly
        v_should_create_task := EXTRACT(DOW FROM v_current_date) = EXTRACT(DOW FROM v_habit_record.start_date);
    END CASE;

    -- Create task if needed and doesn't already exist
    IF v_should_create_task THEN
      INSERT INTO tasks (
        workspace_id,
        title,
        description,
        status,
        priority,
        due_date,
        estimated_duration,
        assigned_to,
        created_by,
        habit_id,
        auto_generated,
        is_recurring,
        scheduled_date
      )
      SELECT
        v_habit_record.workspace_id,
        v_habit_record.title,
        COALESCE(v_habit_record.description, ''),
        'pending'::task_status,
        'medium'::task_priority,
        v_current_date::timestamp with time zone,
        v_habit_record.duration_minutes,
        v_habit_record.created_by,
        v_habit_record.created_by,
        p_habit_id,
        true,
        true,
        v_current_date::timestamp with time zone
      WHERE NOT EXISTS (
        SELECT 1 FROM tasks
        WHERE habit_id = p_habit_id
        AND DATE(due_date) = v_current_date
        AND auto_generated = true
      );

      IF FOUND THEN
        v_task_count := v_task_count + 1;
      END IF;
    END IF;

    v_current_date := v_current_date + 1;
  END LOOP;

  RETURN v_task_count;
END;
$$;

-- Function to update task status automatically based on due date and scheduled date
CREATE OR REPLACE FUNCTION public.update_task_status_auto()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  -- Auto-update status based on dates
  IF NEW.scheduled_date IS NOT NULL AND NEW.status = 'pending' THEN
    NEW.status := 'scheduled'::task_status;
  ELSIF NEW.scheduled_date IS NULL AND NEW.status = 'scheduled' THEN
    NEW.status := 'pending'::task_status;
  END IF;

  RETURN NEW;
END;
$$;

-- Create trigger for automatic status updates
DROP TRIGGER IF EXISTS auto_update_task_status ON public.tasks;
CREATE TRIGGER auto_update_task_status
  BEFORE INSERT OR UPDATE OF scheduled_date ON public.tasks
  FOR EACH ROW
  EXECUTE FUNCTION public.update_task_status_auto();

-- ============================================================================
-- 9. ADD UPDATED_AT TRIGGER FOR NEW TABLE
-- ============================================================================

CREATE TRIGGER update_ai_habit_suggestions_updated_at
  BEFORE UPDATE ON public.ai_habit_suggestions
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at();

-- ============================================================================
-- MIGRATION COMPLETE
-- ============================================================================