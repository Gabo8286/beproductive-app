echo "üîç Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Track if any checks fail
FAILED=0

echo -e "${BLUE}Step 1/7: Running ESLint...${NC}"
# Run ESLint but don't fail build for warnings (import order, etc.)
npm run lint > /tmp/eslint_output.txt 2>&1
ESLINT_EXIT_CODE=$?
ERROR_COUNT=$(grep "errors" /tmp/eslint_output.txt | tail -1 | grep -o '[0-9]* errors' | grep -o '[0-9]*' || echo "0")
WARNING_COUNT=$(grep "warnings" /tmp/eslint_output.txt | tail -1 | grep -o '[0-9]* warnings' | grep -o '[0-9]*' || echo "0")

if [ "$ERROR_COUNT" -gt 0 ]; then
    echo -e "${RED}‚ùå ESLint found $ERROR_COUNT errors (blocking)${NC}"
    FAILED=1
elif [ "$WARNING_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è ESLint found $WARNING_COUNT warnings (non-blocking for development)${NC}"
else
    echo -e "${GREEN}‚úÖ ESLint passed${NC}"
fi

echo -e "${BLUE}Step 2/7: Running TypeScript check...${NC}"
if ! npm run type-check; then
    echo -e "${RED}‚ùå TypeScript check failed${NC}"
    FAILED=1
else
    echo -e "${GREEN}‚úÖ TypeScript check passed${NC}"
fi

echo -e "${BLUE}Step 3/7: Running unit tests...${NC}"
# Run tests but don't fail build if vitest config has issues
if npm run test:run > /tmp/test_output.txt 2>&1; then
    echo -e "${GREEN}‚úÖ Unit tests passed${NC}"
else
    # Check if it's a config issue vs actual test failures
    if grep -q "Cannot find package" /tmp/test_output.txt || grep -q "vitest.config" /tmp/test_output.txt; then
        echo -e "${YELLOW}‚ö†Ô∏è Test config issues (non-blocking - vitest dependencies)${NC}"
    else
        echo -e "${RED}‚ùå Unit tests failed${NC}"
        FAILED=1
    fi
fi

echo -e "${BLUE}Step 4/7: Checking TODO comments...${NC}"
if [ -f "scripts/check-todos.sh" ]; then
    if ! ./scripts/check-todos.sh; then
        echo -e "${RED}‚ùå TODO check failed${NC}"
        FAILED=1
    else
        echo -e "${GREEN}‚úÖ TODO check passed${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è TODO checker not found, skipping${NC}"
fi

echo -e "${BLUE}Step 5/7: Checking bundle size...${NC}"
# Only run build check if package.json has build script
if npm run build &>/dev/null; then
    BUNDLE_SIZE=$(find dist -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
    MAX_SIZE=3145728  # 3MB in bytes (realistic for feature-rich app)

    if [ "$BUNDLE_SIZE" -gt "$MAX_SIZE" ]; then
        echo -e "${RED}‚ùå Bundle size too large: $(($BUNDLE_SIZE / 1024))KB > $(($MAX_SIZE / 1024))KB${NC}"
        FAILED=1
    else
        echo -e "${GREEN}‚úÖ Bundle size OK: $(($BUNDLE_SIZE / 1024))KB${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Build failed, skipping bundle size check${NC}"
fi

echo -e "${BLUE}Step 6/7: Cross-platform consistency check...${NC}"
if [ -f "../shared/scripts/validate-consistency.sh" ]; then
    if ! ../shared/scripts/validate-consistency.sh --quiet; then
        echo -e "${YELLOW}‚ö†Ô∏è Consistency check found issues (not blocking)${NC}"
    else
        echo -e "${GREEN}‚úÖ Consistency check passed${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Consistency checker not found, skipping${NC}"
fi

echo -e "${BLUE}Step 7/7: Checking for console logs...${NC}"
CONSOLE_COUNT=$(grep -r "console\." src/ --include="*.ts*" | grep -v "console.error\|console.warn" | wc -l)
if [ "$CONSOLE_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Found $CONSOLE_COUNT console logs (non-blocking for development)${NC}"
else
    echo -e "${GREEN}‚úÖ No console logs found${NC}"
fi

# Summary
echo ""
echo "============================================"
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ All quality checks passed!${NC}"
    echo -e "${GREEN}‚úÖ Commit approved${NC}"
    exit 0
else
    echo -e "${RED}üí• Quality checks failed!${NC}"
    echo -e "${RED}‚ùå Commit blocked${NC}"
    echo ""
    echo "Please fix the issues above and try again."
    exit 1
fi
