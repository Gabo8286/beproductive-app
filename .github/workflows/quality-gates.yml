name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:run

    - name: Check TODO comments
      run: |
        if [ -f "scripts/check-todos.sh" ]; then
          ./scripts/check-todos.sh
        fi

    - name: Build production
      run: npm run build

    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(find dist -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
        MAX_SIZE=2097152  # 2MB
        echo "Bundle size: $(($BUNDLE_SIZE / 1024))KB"
        if [ "$BUNDLE_SIZE" -gt "$MAX_SIZE" ]; then
          echo "❌ Bundle too large: $(($BUNDLE_SIZE / 1024))KB > $(($MAX_SIZE / 1024))KB"
          exit 1
        fi

    - name: Cross-platform consistency check
      run: |
        if [ -f "../shared/scripts/validate-consistency.sh" ]; then
          ../shared/scripts/validate-consistency.sh
        else
          echo "Cross-platform validation script not found, skipping..."
        fi

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bundle-analysis-${{ matrix.node-version }}
        path: dist/

  performance-check:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for performance test
      run: npm run build

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun || true

  security-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level=moderate || true

    - name: Check for secrets
      run: |
        if grep -r "api[_-]key\|secret\|password\|token" src/ --include="*.ts*" | grep -v "placeholder\|example\|demo"; then
          echo "❌ Potential secrets found in code"
          exit 1
        fi
